<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>算法通关村第一关----链表经典问题之双指针专题笔记</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<br>在与链表有关的算法题中，经常会使用双指针去解决这些问题，而双指针中最常用到的是快慢指针，通过两个不同移动速率的指针来遍历链表。这种策略通常用于解决需要同时遍历链表中两个不同位置的问题。<p>快慢指针常见的用途包括：</p><ul><li>1.<strong>判定链表是否有环：</strong> 使用快慢指针，如果存在环，快指针最终会追上慢指针。</li><li>2.<strong>找到链表的中间节点：</strong> 使用快慢指针，快指针每次移动两步，慢指针每次移动一步，当快指针到达链表末尾时，慢指针正好在中间。</li><li>3.<strong>判断回文链表：</strong> 使用快慢指针找到中间节点，然后反转后半部分链表，再逐一比较前半部分和后半部分的值是否相同。</li></ul><h3 id="1-LeetCode的876题：链表的中间结点"><a href="#1-LeetCode的876题：链表的中间结点" class="headerlink" title="1. LeetCode的876题：链表的中间结点"></a>1. LeetCode的876题：链表的中间结点</h3><p>题目描述：</p><pre><code>给你单链表的头结点 head ，请你找出并返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。</code></pre><p>![[Pasted image 20231127111952.png]]</p><ul><li>利用快慢指针来解决，快指针一次循环走2步，慢指针一次循环走1步  <ul><li>当链表结点个数为奇数时，当快指针到最后一个结点时，慢指针一定是在链表的中间位置。例如{1，2，3，4，5}慢指针走一步到2时，快指针走两步到3慢指针再走一步到3时，快指针正好到5尾结点。</li><li>当链表结点个数为偶数时，其中间两个结点均为中间结点，但题目要求返回第二个结点，因此快指针则要遍历到末尾结点所指向的null为止。我们可以假设总共循环了n次，即快指针指向了位于2n+1的null，慢指针指向了位于n+1的结点，由于链表结点个数为2n所以前面一个的中间结点即为n，则此时的慢指针指向n+1即为第二个中间结点。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">middleNode</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line"><span class="comment">//例如&#123;1，2，3，4，5&#125;慢指针走一步到2时，快指针走两步到3  </span></span><br><span class="line"><span class="comment">//慢指针再走一步到3时，快指针正好到5尾结点  </span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>)&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head,slow = head;</span><br><span class="line"><span class="comment">//注意，此时的一定要判断fast.next是否为空</span></span><br><span class="line"><span class="comment">//否则后面fast=fast.next.next的时候会出现空指针异常</span></span><br><span class="line"><span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>)&#123;</span><br><span class="line">slow = slow.next;</span><br><span class="line">fast = fast.next.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> slow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-寻找倒数第k个元素"><a href="#2-寻找倒数第k个元素" class="headerlink" title="2. 寻找倒数第k个元素"></a>2. 寻找倒数第k个元素</h3><p>题目描述：</p><blockquote><p>输入一个链表&#96;，输出该链表中倒数第k个节点。本题从1开始计数，即链表的尾节点是倒数第1个节点。<br>    示例<br>    给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.<br>    返回链表 4-&gt;5.</p></blockquote><p>这题也是利用快慢指针来解决，只需要让fast指针先走k个结点，后slow再与fast一同走且每次循环走的步数相同。那么当fast走到null时，其与slow相差的结点个数依旧为k，再从链尾往前看，此时的slow即为倒数第k个节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">getKthFromEnd</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;  </span><br><span class="line"><span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;  </span><br><span class="line"><span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;  </span><br><span class="line"><span class="comment">//fast先走k步</span></span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; k &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">fast = fast.next;  </span><br><span class="line">k--;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//再一同走直到fast到null</span></span><br><span class="line"><span class="keyword">while</span> (fast != <span class="literal">null</span>) &#123;  </span><br><span class="line">fast = fast.next;  </span><br><span class="line">slow = slow.next;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> slow;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-LeetCode的61题：旋转链表"><a href="#3-LeetCode的61题：旋转链表" class="headerlink" title="3. LeetCode的61题：旋转链表"></a>3. LeetCode的61题：旋转链表</h3><p>题目描述</p><blockquote><p>给你一个链表的头节点 <code>head</code> ，旋转链表，将链表每个节点向右移动 <code>k</code> 个位置。<br> ![[Pasted image 20231127225407.png]]</p></blockquote><p>通过示例我们可以观察到rotate 2的链表是由第一行的链表截取{1，2，3}和{4，5}两部分，再调换顺序成{4，5}{1，2，3}后拼接得到的。<br><br>因此可以先找到倒数第k个节点所在的位置（这个上一题已经实现了），后以这个节点为头节点，将后面这段的尾节点的next值指向前一段的头节点，从而调换拼接成新的链表。<br></p><p>当然，这个倒数第k个节点的一定要小于链表的len，因此k&#x3D;k%len。当k &#x3D;&#x3D; 0时，则不需要进行旋转，直接返回当前头节点。否则根据上面那题的方法找到倒数第k个节点，并调换再去拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">rotateRight</span><span class="params">(ListNode head, <span class="type">int</span> k)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里要判断下k是否等于0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || k == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head,slow = head,temp = head;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算当前链表的长度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(head != <span class="literal">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">            head = head.next;</span><br><span class="line"></span><br><span class="line">            len++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保证k小于len</span></span><br><span class="line"></span><br><span class="line">        k %= len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到倒数第k个节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; k &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            fast = fast.next;</span><br><span class="line"></span><br><span class="line">            k--;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//此时的尾节点就为fast，slow为倒数k个节点前面一个</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">            fast = fast.next;</span><br><span class="line"></span><br><span class="line">            slow = slow.next;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将slow的后一个节点作为头结点</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">res</span> <span class="operator">=</span> slow.next;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一定要将翻转完的尾节点的next置为null</span></span><br><span class="line"></span><br><span class="line">        slow.next = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将两段链表拼接起来</span></span><br><span class="line"></span><br><span class="line">        fast.next = temp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回拼接后的链表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>算法通关村第一关----链表的青铜挑战笔记</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-什么是链表"><a href="#1-什么是链表" class="headerlink" title="1.什么是链表"></a>1.什么是链表</h3><p>什么是链表 链表一种线性的数据结构，将多个结点连接起来，每个结点都存在一个指向下一个结点的next指针。如若是单向列表的话，最末端的那个结点的next指针则指向null；如若是循环链表，最末端结点的next指针则指向head头结点。</p><h3 id="2-链表的分类"><a href="#2-链表的分类" class="headerlink" title="2.链表的分类"></a>2.链表的分类</h3><p><strong>单链表</strong></p><p>![[Pasted image 20231126165009.png]]</p><ul><li>单链表的每个结点除了存储数据data外，还需要记录下个结点的地址，称为后继指针next。</li></ul><p><strong>双向链表</strong></p><p>![[Pasted image 20231126165959.png]]</p><ul><li>双向链表的每个结点在单链表的基础上增加了前驱指针prev，指向上一个结点。</li></ul><p><strong>循环列表</strong></p><p>![[Pasted image 20231126171010.png]]</p><ul><li>循环链表仅仅是将单链表最末端的尾结点从指向null改成指向头结点head，进而实现了一个类似环形的结构。</li></ul><h3 id="3-创建链表"><a href="#3-创建链表" class="headerlink" title="3.创建链表"></a>3.创建链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;  </span><br><span class="line"><span class="comment">// 节点的值  </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> val;  </span><br><span class="line"><span class="comment">// 下一个节点  </span></span><br><span class="line"><span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有参构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;  </span><br><span class="line"><span class="built_in">this</span>.val = val;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//下面的是结点的get，set方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVal</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> val;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVal</span><span class="params">(<span class="type">int</span> val)</span> &#123;  </span><br><span class="line"><span class="built_in">this</span>.val = val;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getNext</span><span class="params">()</span> &#123;  </span><br><span class="line"><span class="keyword">return</span> next;  </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(ListNode next)</span> &#123;  </span><br><span class="line"><span class="built_in">this</span>.next = next;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-链表的插入"><a href="#4-链表的插入" class="headerlink" title="4.链表的插入"></a>4.链表的插入</h3><ul><li><p>如果插入的位置position &#x3D; 1，则只需将新建结点new的next指针指向当前head所指向的结点，再将head指向新建结点，使得新建结点new变成头结点。</p></li><li><p>如果插入位置position &gt; 1，要先遍历链表到当前position的前一个结点，先要将new结点的next指针指向位于position位置的结点，再将前一个结点的next指针指向新建的new结点，从而使得整个链表重新链接起来。由于java的new Node结点后，改结点的next指针会自动置为null值。所以如果插入的位置是末尾的话，只需遍历到尾结点，后将其的next指针指向new的新结点即可。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 链表插入  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> head 链表头节点  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> nodeInsert 待插入节点  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> position 待插入位置，取值从2开始  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 插入后得到的链表头节点  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">insertNode</span><span class="params">(Node head, Node nodeInsert, <span class="type">int</span> position)</span> &#123;  </span><br><span class="line"><span class="comment">// 需要判空，否则后面可能会有空指针异常  </span></span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;  </span><br><span class="line"><span class="keyword">return</span> nodeInsert;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//越界判断  </span></span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getLength(head);  </span><br><span class="line"><span class="keyword">if</span> (position &gt; size + <span class="number">1</span> || position &lt; <span class="number">1</span>) &#123;  </span><br><span class="line">System.out.println(<span class="string">&quot;位置参数越界&quot;</span>);  </span><br><span class="line"><span class="keyword">return</span> head;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//在链表开头插入  </span></span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">1</span>) &#123;  </span><br><span class="line">nodeInsert.next = head;  </span><br><span class="line"><span class="comment">// return nodeInsert;  </span></span><br><span class="line"><span class="comment">//上面return还可以这么写：  </span></span><br><span class="line">head = nodeInsert;  </span><br><span class="line"><span class="keyword">return</span> head;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="type">Node</span> <span class="variable">pNode</span> <span class="operator">=</span> head;  </span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span> (count &lt; position - <span class="number">1</span>) &#123;  </span><br><span class="line">pNode = pNode.next;  </span><br><span class="line">count++;  </span><br><span class="line">&#125;  </span><br><span class="line">nodeInsert.next = pNode.next;  </span><br><span class="line">pNode.next = nodeInsert;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">return</span> head;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-链表的删除"><a href="#5-链表的删除" class="headerlink" title="5.链表的删除"></a>5.链表的删除</h3><ul><li>删除头结点<br>   ![[Pasted image 20231126175257.png]]<ul><li>删除头结点只需将head指针指向当前头结点的next，原本的结点由于访问不到，则会被JVM回收释放掉。</li></ul></li><li>删除尾结点<br>  ![[Pasted image 20231126175751.png]]<ul><li>遍历链表，找到尾结点的前驱结点，直接将前驱结点的next指针指向null即可。原本的尾结点也会由于访问不到，被JVM回收。</li></ul></li><li>删除中间结点<br>   ![](<a href="https://gitee.com/nianshangy/picture/raw/master/Pasted%20image%2020231126180053.png">Pasted image 20231126180053.png (1060×338) (gitee.com)</a>)<ul><li>也是遍历链表，找到要删除的结点的前驱结点，将前驱结点的next指针指向要删除结点的next即可。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment">* 删除节点  </span></span><br><span class="line"><span class="comment">*  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> head 链表头节点  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> position 删除节点位置，取值从1开始  </span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 删除后的链表头节点  </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Node <span class="title function_">deleteNode</span><span class="params">(Node head, <span class="type">int</span> position)</span> &#123;  </span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> getLength(head);  </span><br><span class="line"><span class="comment">//思考一下，这里为什么是size，而不是size+1</span></span><br><span class="line"><span class="comment">//这里如果是size+1的话，那么position就可以取到size</span></span><br><span class="line"><span class="comment">//后面cur就会为尾结点，使得curNode为尾结点指向的null</span></span><br><span class="line"><span class="comment">//当调用curNode.next时则会出现空指针异常</span></span><br><span class="line"><span class="keyword">if</span> (position &gt; size || position &lt;<span class="number">1</span>) &#123;  </span><br><span class="line">System.out.println(<span class="string">&quot;输入的参数有误&quot;</span>);  </span><br><span class="line"><span class="keyword">return</span> head;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">if</span> (position == <span class="number">1</span>) &#123;  </span><br><span class="line"><span class="comment">//curNode就是链表的新head  </span></span><br><span class="line"><span class="keyword">return</span> head.next;  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;  </span><br><span class="line"><span class="type">Node</span> <span class="variable">cur</span> <span class="operator">=</span> head;  </span><br><span class="line"><span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line"><span class="keyword">while</span> (count &lt; position - <span class="number">1</span>) &#123;  </span><br><span class="line">cur = cur.next;  </span><br><span class="line">count++;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="type">Node</span> <span class="variable">curNode</span> <span class="operator">=</span> cur.next;  </span><br><span class="line">cur.next = curNode.next;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">return</span> head;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>49.字母异位词</title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a><em>题目</em></h3><h3 id="题目链接：49-字母异位词分组-力扣（LeetCode）"><a href="#题目链接：49-字母异位词分组-力扣（LeetCode）" class="headerlink" title="题目链接：49. 字母异位词分组 - 力扣（LeetCode）"></a>题目链接：<a href="https://leetcode.cn/problems/group-anagrams/description/?envType=study-plan-v2&envId=top-100-liked">49. 字母异位词分组 - 力扣（LeetCode）</a></h3><p><strong>题目描述</strong></p><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的所有字母得到的一个新单词。</p><img src="D:\Project\myBlog\source\img\screenShot\img.png" alt="image-20231107002252151" style="zoom: 100%; float:left;"/><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>由于字母异位词中的各个字母个数相同，因此其转成字符型数组后进行排序的结果也就相同，所以可以将排序后的字符串作为HashMap的key，进而将<strong>字母异位词</strong>所组成的List集合去作为HashMap里的value值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">groupAnagrams</span><span class="params">(String[] strs)</span> &#123;</span><br><span class="line">    Map&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, List&lt;String&gt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        <span class="type">char</span>[] charArray = str.toCharArray();</span><br><span class="line">        Arrays.sort(charArray);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> String.valueOf(charArray);<span class="comment">//HashMap的key</span></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; list = map.getOrDefault(key, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;());</span><br><span class="line">        list.add(str);</span><br><span class="line">        map.put(key, list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;(map.values());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/post/4a17b156.html"/>
      <url>/post/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
